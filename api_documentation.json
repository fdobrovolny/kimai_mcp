{
  "openapi": "3.0.0",
  "info": {
    "title": "Kimai - API",
    "description": "JSON API for the Kimai time-tracking software. Find more infos in our [API documentation](https://www.kimai.org/documentation/rest-api.html).\n",
    "version": "1.1"
  },
  "paths": {
    "/api/absences": {
      "get": {
        "tags": [
          "Absence"
        ],
        "summary": "Fetch absences",
        "operationId": "get_absences",
        "parameters": [
          {
            "name": "user",
            "in": "query",
            "description": "User ID to filter absences. Needs permission 'contract_other_profile' (default: current user)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null,
              "pattern": "\\d+"
            }
          },
          {
            "name": "begin",
            "in": "query",
            "description": "Only absences after this date will be included (format: HTML5)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "Only absences before this date will be included (format: HTML5)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status to fetch. Allowed are: 'approved', 'open', 'all' (default: 'approved')",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null,
              "pattern": "approved|open|all"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of absence entities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Absence2"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Absence"
        ],
        "summary": "Create absence(s)",
        "description": "If a mandatory approval workflow is attached to the \"absence type\", the approval will be created in the \"open\" state.",
        "operationId": "post_kimaiplugin_workcontract_api_absence_createabsence",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AbsenceForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a collection of absence entities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Absence2"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "absence"
            ]
          }
        ]
      }
    },
    "/api/absences/calendar": {
      "get": {
        "tags": [
          "Absence"
        ],
        "summary": "Fetch absences for calendar integration",
        "operationId": "get_absences_calendar",
        "parameters": [
          {
            "name": "user",
            "in": "query",
            "description": "User ID to filter absences. Needs permission 'contract_other_profile' (default: current user)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null,
              "pattern": "\\d+"
            }
          },
          {
            "name": "begin",
            "in": "query",
            "description": "Only absences after this date will be included (format: HTML5)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "Only absences before this date will be included (format: HTML5)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "The language to be used for displaying the absences (format: en or en_GB)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status to fetch. Allowed are: 'approved', 'open', 'all' (default: 'approved')",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null,
              "pattern": "approved|open|all"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of absence entities for the calendar",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CalendarEvent"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API"
            ]
          }
        ],
        "x-internal": true
      }
    },
    "/api/absences/{id}": {
      "delete": {
        "tags": [
          "Absence"
        ],
        "summary": "Delete absence",
        "operationId": "delete_absence",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Absence ID to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete one absence"
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "delete_absence"
            ]
          }
        ]
      }
    },
    "/api/absences/{id}/request": {
      "patch": {
        "tags": [
          "Absence"
        ],
        "summary": "Request absence approval",
        "description": "Request a absence approval and notify the supervisor via email.",
        "operationId": "patch_request_approval_absence",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Absence ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the absence",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Absence2"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "approval_absence"
            ]
          }
        ]
      }
    },
    "/api/absences/{id}/reject": {
      "patch": {
        "tags": [
          "Absence"
        ],
        "summary": "Reject absence approval",
        "description": "Rejects a pending absence approval request and notifies the user via email.",
        "operationId": "patch_reject_approval_absence",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Absence ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the absence",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Absence2"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "approve_absence"
            ]
          }
        ]
      }
    },
    "/api/absences/{id}/confirm": {
      "patch": {
        "tags": [
          "Absence"
        ],
        "summary": "Confirm absence approval",
        "description": "Confirm a pending absence approval request and notifies the user via email.",
        "operationId": "patch_confirm_approval_absence",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Absence ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the absence",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Absence2"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "approve_absence"
            ]
          }
        ]
      }
    },
    "/api/absences/types": {
      "get": {
        "tags": [
          "Absence"
        ],
        "summary": "Fetch absence types",
        "operationId": "get_kimaiplugin_workcontract_api_absence_getabsencetypes",
        "parameters": [
          {
            "name": "language",
            "in": "query",
            "description": "The language to be used for displaying the absences types (format: de or en_GB)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of absence types",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "example": {
                  "holiday": "Vacation"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API"
            ]
          }
        ]
      }
    },
    "/api/public-holidays": {
      "get": {
        "tags": [
          "Public holiday"
        ],
        "summary": "Fetch public holidays",
        "operationId": "get_public_holidays",
        "parameters": [
          {
            "name": "group",
            "in": "query",
            "description": "Public holiday - group ID to filter. (default: default group)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null,
              "pattern": "\\d+"
            }
          },
          {
            "name": "begin",
            "in": "query",
            "description": "Only absences after this date will be included (format: HTML5)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "Only absences before this date will be included (format: HTML5)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of public holidays",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PublicHoliday"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API"
            ]
          }
        ]
      }
    },
    "/api/public-holidays/calendar": {
      "get": {
        "tags": [
          "Public holiday"
        ],
        "summary": "Fetch public holidays for calendar integration",
        "operationId": "get_public_holidays_calendar",
        "parameters": [
          {
            "name": "group",
            "in": "query",
            "description": "Public holiday - group ID to filter. (default: default group)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null,
              "pattern": "\\d+"
            }
          },
          {
            "name": "begin",
            "in": "query",
            "description": "Only absences after this date will be included (format: HTML5)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "Only absences before this date will be included (format: HTML5)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of public holidays",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CalendarEvent"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API"
            ]
          }
        ],
        "x-internal": true
      }
    },
    "/api/public-holidays/{id}": {
      "delete": {
        "tags": [
          "Public holiday"
        ],
        "summary": "Delete public holiday",
        "operationId": "delete_public_holiday",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Public holiday ID to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete one public holiday"
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "edit_public_holidays"
            ]
          }
        ]
      }
    },
    "/api/public-holidays/group/{id}": {
      "delete": {
        "tags": [
          "Public holiday"
        ],
        "summary": "Delete public holiday group",
        "operationId": "delete_public_holiday_group",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Public holiday group ID to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a public holiday group"
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "edit_public_holidays"
            ]
          }
        ]
      }
    },
    "/api/work-contract/approval/{user}/{month}": {
      "delete": {
        "tags": [
          "Work Contract"
        ],
        "summary": "Unlock months",
        "description": "This unlocks all months from the specified month to the end of the given year.",
        "operationId": "delete_work_times_contract_unlock_month",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "The User ID whose lock will be removed",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          },
          {
            "name": "month",
            "in": "path",
            "description": "All months including the given one will be unlocked (format: Y-m-d)",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "unlock_times_contract"
            ]
          }
        ]
      }
    },
    "/api/actions/timesheet/{id}/{view}/{locale}": {
      "get": {
        "tags": [
          "Actions"
        ],
        "summary": "Fetch item actions for Timesheet",
        "operationId": "get_timesheet_actions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Timesheet ID to fetch",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          },
          {
            "name": "view",
            "in": "path",
            "description": "View to display the actions at (e.g. index, custom)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locale",
            "in": "path",
            "description": "Language to translate the action title to (e.g. de, en)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns item actions for the timesheet",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAction"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API"
            ]
          }
        ],
        "x-internal": true
      }
    },
    "/api/actions/activity/{id}/{view}/{locale}": {
      "get": {
        "tags": [
          "Actions"
        ],
        "summary": "Fetch item actions for Activity",
        "operationId": "get_activity_actions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Activity ID to fetch",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          },
          {
            "name": "view",
            "in": "path",
            "description": "View to display the actions at (e.g. index, custom)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locale",
            "in": "path",
            "description": "Language to translate the action title to (e.g. de, en)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns item actions for the activity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAction"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API"
            ]
          }
        ],
        "x-internal": true
      }
    },
    "/api/actions/project/{id}/{view}/{locale}": {
      "get": {
        "tags": [
          "Actions"
        ],
        "summary": "Fetch item actions for Project",
        "operationId": "get_project_actions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project ID to fetch",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          },
          {
            "name": "view",
            "in": "path",
            "description": "View to display the actions at (e.g. index, custom)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locale",
            "in": "path",
            "description": "Language to translate the action title to (e.g. de, en)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns item actions for the project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAction"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API"
            ]
          }
        ],
        "x-internal": true
      }
    },
    "/api/actions/customer/{id}/{view}/{locale}": {
      "get": {
        "tags": [
          "Actions"
        ],
        "summary": "Fetch item actions for Customer",
        "operationId": "get_customer_actions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer ID to fetch",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          },
          {
            "name": "view",
            "in": "path",
            "description": "View to display the actions at (e.g. index, custom)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locale",
            "in": "path",
            "description": "Language to translate the action title to (e.g. de, en)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns item actions for the customer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAction"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API"
            ]
          }
        ],
        "x-internal": true
      }
    },
    "/api/activities": {
      "get": {
        "tags": [
          "Activity"
        ],
        "summary": "Fetch activities",
        "operationId": "get_activities",
        "parameters": [
          {
            "name": "project",
            "in": "query",
            "description": "Project ID to filter activities",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null,
              "pattern": "\\d+"
            }
          },
          {
            "name": "projects[]",
            "in": "query",
            "description": "List of project IDs to filter activities, e.g.: projects[]=1&projects[]=2",
            "required": false,
            "allowEmptyValue": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": [],
              "default": [],
              "pattern": "\\d+"
            }
          },
          {
            "name": "visible",
            "in": "query",
            "description": "Visibility status to filter activities: 1=visible, 2=hidden, 3=all",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": 1,
              "pattern": "1|2|3"
            }
          },
          {
            "name": "globals",
            "in": "query",
            "description": "Use if you want to fetch only global activities. Allowed values: 0|1 (default: 0 for false)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null,
              "pattern": "0|1|true|false"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The field by which results will be ordered. Allowed values: id, name, project (default: name)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null,
              "pattern": "id|name|project"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "The result order. Allowed values: ASC, DESC (default: ASC)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null,
              "pattern": "ASC|DESC"
            }
          },
          {
            "name": "term",
            "in": "query",
            "description": "Free search term",
            "required": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string",
              "default": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of activities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityCollection"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Activity"
        ],
        "summary": "Create activity",
        "description": "Creates a new activity and returns it afterwards",
        "operationId": "post_activity",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivityEditForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the new created activity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API"
            ]
          }
        ]
      }
    },
    "/api/activities/{id}": {
      "get": {
        "tags": [
          "Activity"
        ],
        "summary": "Fetch activity",
        "operationId": "get_activity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Activity ID to fetch",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns one activity entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "view"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Activity"
        ],
        "summary": "Delete activity",
        "description": "[DANGER] This will also delete ALL linked timesheets.\nDo you want to use `PATCH` instead and mark it as inactive with `{visible: false}` instead?",
        "operationId": "delete_activity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Activity ID to delete",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete one activity"
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "delete"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Activity"
        ],
        "summary": "Update activity",
        "description": "Update an existing activity, you can pass all or just a subset of all attributes",
        "operationId": "patch_activity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Activity ID to update",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivityEditForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated activity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "edit"
            ]
          }
        ]
      }
    },
    "/api/activities/{id}/meta": {
      "patch": {
        "tags": [
          "Activity"
        ],
        "summary": "Update activity custom-field",
        "operationId": "patch_app_api_activity_meta",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Activity record ID to set the meta-field value for",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "value"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "default": null
                  },
                  "value": {
                    "type": "string",
                    "default": null
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sets the value of an existing/configured meta-field. You cannot create unknown meta-fields, if the given name is not a configured meta-field, this will return an exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "edit"
            ]
          }
        ]
      }
    },
    "/api/activities/{id}/rates": {
      "get": {
        "tags": [
          "Activity"
        ],
        "summary": "Fetch rates for activity",
        "operationId": "get_activity_rates",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The activity whose rates will be returned",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of activity rate entities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityRate"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "edit"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Activity"
        ],
        "summary": "Add rate for activity",
        "operationId": "post_activity_rate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The activity to add the rate for",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivityRateForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the new created rate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityRate"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "edit"
            ]
          }
        ]
      }
    },
    "/api/activities/{id}/rates/{rateId}": {
      "delete": {
        "tags": [
          "Activity"
        ],
        "summary": "Delete rate for activity",
        "operationId": "delete_activity_rate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The activity whose rate will be removed",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          },
          {
            "name": "rateId",
            "in": "path",
            "description": "The rate to remove",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content: 204 on successful delete"
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "edit"
            ]
          }
        ]
      }
    },
    "/api/config/timesheet": {
      "get": {
        "tags": [
          "Default"
        ],
        "summary": "Fetch timesheet configuration",
        "operationId": "get_app_api_configuration_timesheetconfig",
        "responses": {
          "200": {
            "description": "Returns the instance specific timesheet configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetConfig"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API"
            ]
          }
        ]
      }
    },
    "/api/config/colors": {
      "get": {
        "tags": [
          "Default"
        ],
        "summary": "Fetch configured color codes",
        "operationId": "get_app_api_configuration_colorconfig",
        "responses": {
          "200": {
            "description": "Returns the configured color codes and names",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "example": {
                  "Red": "#ff0000"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API"
            ]
          }
        ]
      }
    },
    "/api/customers": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Fetch customers",
        "operationId": "get_customers",
        "parameters": [
          {
            "name": "visible",
            "in": "query",
            "description": "Visibility status to filter customers: 1=visible, 2=hidden, 3=both",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": 1,
              "pattern": "1|2|3"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "The result order. Allowed values: ASC, DESC (default: ASC)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null,
              "pattern": "ASC|DESC"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The field by which results will be ordered. Allowed values: id, name (default: name)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null,
              "pattern": "id|name"
            }
          },
          {
            "name": "term",
            "in": "query",
            "description": "Free search term",
            "required": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string",
              "default": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of customers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerCollection"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create customer",
        "description": "Creates a new customer and returns it afterwards",
        "operationId": "post_customer",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerEditForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the new created customer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API"
            ]
          }
        ]
      }
    },
    "/api/customers/{id}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Fetch customer",
        "operationId": "get_customer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns one customer entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "view"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete customer",
        "description": "[DANGER] This will also delete ALL linked projects, project activities and timesheets.\nDo you want to use `PATCH` instead and mark it as inactive with `{visible: false}` instead?",
        "operationId": "delete_customer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer ID to delete",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete one customer"
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "delete"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Update customer",
        "description": "Update an existing customer, you can pass all or just a subset of all attributes",
        "operationId": "patch_customer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer ID to update",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerEditForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated customer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "edit"
            ]
          }
        ]
      }
    },
    "/api/customers/{id}/meta": {
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Update customer custom-field",
        "operationId": "patch_app_api_customer_meta",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer record ID to set the meta-field value for",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "value"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "default": null
                  },
                  "value": {
                    "type": "string",
                    "default": null
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sets the value of an existing/configured meta-field. You cannot create unknown meta-fields, if the given name is not a configured meta-field, this will return an exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "edit"
            ]
          }
        ]
      }
    },
    "/api/customers/{id}/rates": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Fetch rates for customer",
        "operationId": "get_customer_rates",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The customer whose rates will be returned",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of customer rate entities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerRate"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "edit"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Add rate for customer",
        "operationId": "post_customer_rate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The customer to add the rate for",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerRateForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the new created rate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerRate"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "edit"
            ]
          }
        ]
      }
    },
    "/api/customers/{id}/rates/{rateId}": {
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete rate for customer",
        "operationId": "delete_customer_rate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The customer whose rate will be removed",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          },
          {
            "name": "rateId",
            "in": "path",
            "description": "The rate to remove",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content: 204 on successful delete"
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "edit"
            ]
          }
        ]
      }
    },
    "/api/export/{id}": {
      "delete": {
        "tags": [
          "Export"
        ],
        "summary": "Delete export template",
        "operationId": "delete_export_template",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Export template ID to delete",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete export template"
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "create_export_template"
            ]
          }
        ],
        "x-internal": true
      }
    },
    "/api/invoices": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Fetch invoices",
        "operationId": "get_invoices",
        "parameters": [
          {
            "name": "begin",
            "in": "query",
            "description": "Only records after this date will be included (format: HTML5 datetime-local, e.g. YYYY-MM-DDThh:mm:ss)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "Only records before this date will be included (format: HTML5 datetime-local, e.g. YYYY-MM-DDThh:mm:ss)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "name": "customers[]",
            "in": "query",
            "description": "List of customer IDs to filter, e.g.: customers[]=1&customers[]=2",
            "required": false,
            "allowEmptyValue": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": [],
              "default": [],
              "pattern": "\\d+"
            }
          },
          {
            "name": "status[]",
            "in": "query",
            "description": "Invoice status: pending, paid, canceled, new. Default: all",
            "required": false,
            "allowEmptyValue": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": [],
              "default": [],
              "pattern": "pending|paid|canceled|new"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page to display, renders a 404 if not found (default: 1)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null,
              "pattern": "\\d+"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The amount of entries for each page (default: 50)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null,
              "pattern": "\\d+"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of invoices",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceCollection"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "view_invoice"
            ]
          }
        ]
      }
    },
    "/api/invoices/{id}": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Fetch invoice",
        "operationId": "get_invoice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns one invoice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "view_invoice"
            ]
          }
        ]
      }
    },
    "/api/projects": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Fetch projects",
        "operationId": "get_projects",
        "parameters": [
          {
            "name": "customer",
            "in": "query",
            "description": "Customer ID to filter projects",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null,
              "pattern": "\\d+"
            }
          },
          {
            "name": "customers[]",
            "in": "query",
            "description": "List of customer IDs to filter, e.g.: customers[]=1&customers[]=2",
            "required": false,
            "allowEmptyValue": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": [],
              "default": [],
              "pattern": "\\d+"
            }
          },
          {
            "name": "visible",
            "in": "query",
            "description": "Visibility status to filter projects: 1=visible, 2=hidden, 3=both",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": 1,
              "pattern": "1|2|3"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Only projects that started before this date will be included. Allowed format: HTML5 (default: now, if end is also empty)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "Only projects that ended after this date will be included. Allowed format: HTML5 (default: now, if start is also empty)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "name": "ignoreDates",
            "in": "query",
            "description": "If set, start and end are completely ignored. Allowed values: 1 (default: off)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "name": "globalActivities",
            "in": "query",
            "description": "If given, filters projects by their 'global activity' support. Allowed values: 1 (supports global activities) and 0 (without global activities) (default: all)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null,
              "pattern": "0|1"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "The result order. Allowed values: ASC, DESC (default: ASC)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null,
              "pattern": "ASC|DESC"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The field by which results will be ordered. Allowed values: id, name, customer (default: name)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null,
              "pattern": "id|name|customer"
            }
          },
          {
            "name": "term",
            "in": "query",
            "description": "Free search term",
            "required": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string",
              "default": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of projects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectCollection"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Create project",
        "description": "Creates a new project and returns it afterwards",
        "operationId": "post_project",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectEditForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the new created project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API"
            ]
          }
        ]
      }
    },
    "/api/projects/{id}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Fetch project",
        "operationId": "get_project",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns one project entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "view"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Delete project",
        "description": "[DANGER] This will also delete ALL linked activities and timesheets.\nDo you want to use `PATCH` instead and mark it as inactive with `{visible: false}` instead?",
        "operationId": "delete_project",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project ID to delete",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete one project"
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "delete"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Project"
        ],
        "summary": "Update project",
        "description": "Update an existing project, you can pass all or just a subset of all attributes",
        "operationId": "patch_project",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project ID to update",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectEditForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "edit"
            ]
          }
        ]
      }
    },
    "/api/projects/{id}/meta": {
      "patch": {
        "tags": [
          "Project"
        ],
        "summary": "Update project custom-field",
        "operationId": "patch_app_api_project_meta",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project record ID to set the meta-field value for",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "value"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "default": null
                  },
                  "value": {
                    "type": "string",
                    "default": null
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sets the value of an existing/configured meta-field. You cannot create unknown meta-fields, if the given name is not a configured meta-field, this will return an exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "edit"
            ]
          }
        ]
      }
    },
    "/api/projects/{id}/rates": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Fetch rates for project",
        "operationId": "get_project_rates",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The project whose rates will be returned",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of project rate entities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectRate"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "edit"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Add rate for project",
        "operationId": "post_project_rate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The project to add the rate for",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectRateForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the new created rate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectRate"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "edit"
            ]
          }
        ]
      }
    },
    "/api/projects/{id}/rates/{rateId}": {
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Delete rate for project",
        "operationId": "delete_project_rate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The project whose rate will be removed",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          },
          {
            "name": "rateId",
            "in": "path",
            "description": "The rate to remove",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content: 204 on successful delete"
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "edit"
            ]
          }
        ]
      }
    },
    "/api/ping": {
      "get": {
        "tags": [
          "Default"
        ],
        "summary": "Testing route for the API",
        "operationId": "get_app_api_status_ping",
        "responses": {
          "200": {
            "description": "A simple route that returns a 'pong', which you can use for testing the API",
            "content": {
              "application/json": {
                "schema": [],
                "example": "{'message': 'pong'}"
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API"
            ]
          }
        ]
      }
    },
    "/api/version": {
      "get": {
        "tags": [
          "Default"
        ],
        "summary": "Fetch Kimai release",
        "operationId": "get_app_api_status_version",
        "responses": {
          "200": {
            "description": "Returns version information about the current release",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Version"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API"
            ]
          }
        ]
      }
    },
    "/api/plugins": {
      "get": {
        "tags": [
          "Default"
        ],
        "summary": "Fetch installed Plugins",
        "operationId": "get_app_api_status_plugin",
        "responses": {
          "200": {
            "description": "Returns a list of plugin names and versions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Plugin"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API"
            ]
          }
        ]
      }
    },
    "/api/tags": {
      "get": {
        "tags": [
          "Tag"
        ],
        "summary": "Deprecated: Fetch tags as strings",
        "operationId": "get_tags",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Search term to filter tag list",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "DEPRECATED: Returns existing tags as string array",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API"
            ]
          }
        ],
        "x-internal": true
      },
      "post": {
        "tags": [
          "Tag"
        ],
        "summary": "Create tag",
        "description": "Creates a new tag and returns it afterwards",
        "operationId": "post_tag",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagEditForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the new created tag",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API"
            ]
          }
        ]
      }
    },
    "/api/tags/find": {
      "get": {
        "tags": [
          "Tag"
        ],
        "summary": "Fetch tags",
        "operationId": "get_tags_full",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Search term to filter tag list",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Find the collection of all matching tags",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagEntity"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API"
            ]
          }
        ]
      }
    },
    "/api/tags/{id}": {
      "delete": {
        "tags": [
          "Tag"
        ],
        "summary": "Delete tag",
        "operationId": "delete_tag",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tag ID to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "HTTP code 204 for a successful delete"
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "delete_tag"
            ]
          }
        ]
      }
    },
    "/api/teams": {
      "get": {
        "tags": [
          "Team"
        ],
        "summary": "Fetch teams",
        "operationId": "get_teams",
        "responses": {
          "200": {
            "description": "Returns a collection of teams",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamCollection"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "view_team"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Team"
        ],
        "summary": "Create team",
        "description": "Creates a new team and returns it afterwards",
        "operationId": "post_team",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamEditForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the new created team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "create_team"
            ]
          }
        ]
      }
    },
    "/api/teams/{id}": {
      "get": {
        "tags": [
          "Team"
        ],
        "summary": "Fetch team",
        "operationId": "get_team",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns one team entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "view_team"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Team"
        ],
        "summary": "Delete team",
        "operationId": "delete_team",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Team ID to delete",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete one team"
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "delete_team"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Team"
        ],
        "summary": "Update team",
        "description": "Update an existing team, you can pass all or just a subset of all attributes (passing members will replace all existing ones)",
        "operationId": "patch_team",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Team ID to update",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamEditForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "edit_team"
            ]
          }
        ]
      }
    },
    "/api/teams/{id}/members/{userId}": {
      "post": {
        "tags": [
          "Team"
        ],
        "summary": "Add team member",
        "operationId": "post_team_member",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The team which will receive the new member",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The team member to add (User ID)",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Adds a new user to a team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "edit_team"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Team"
        ],
        "summary": "Remove team member",
        "operationId": "delete_team_member",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The team from which the member will be removed",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The team member to remove (User ID)",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Removes a user from the team. The teamlead cannot be removed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "edit_team"
            ]
          }
        ]
      }
    },
    "/api/teams/{id}/customers/{customerId}": {
      "post": {
        "tags": [
          "Team"
        ],
        "summary": "Grant team access to customer",
        "operationId": "post_team_customer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The team that is granted access",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "The customer to grant acecess to (Customer ID)",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Adds a new customer to a team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "edit_team"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Team"
        ],
        "summary": "Revoke customer access from team",
        "operationId": "delete_team_customer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The team whose permission will be revoked",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "The customer to remove (Customer ID)",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Removes a customer from the team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "edit_team"
            ]
          }
        ]
      }
    },
    "/api/teams/{id}/projects/{projectId}": {
      "post": {
        "tags": [
          "Team"
        ],
        "summary": "Grant team access to project",
        "operationId": "post_team_project",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The team that is granted access",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "The project to grant acecess to (Project ID)",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Adds a new project to a team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "edit_team"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Team"
        ],
        "summary": "Revoke project access from team",
        "operationId": "delete_team_project",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The team whose permission will be revoked",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "The project to remove (Project ID)",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Removes a project from the team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "edit_team"
            ]
          }
        ]
      }
    },
    "/api/teams/{id}/activities/{activityId}": {
      "post": {
        "tags": [
          "Team"
        ],
        "summary": "Grant team access to activity",
        "operationId": "post_team_activity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The team that is granted access",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          },
          {
            "name": "activityId",
            "in": "path",
            "description": "The activity to grant acecess to (Activity ID)",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Adds a new activity to a team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "edit_team"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Team"
        ],
        "summary": "Revoke activity access from team",
        "operationId": "delete_team_activity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The team whose permission will be revoked",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          },
          {
            "name": "activityId",
            "in": "path",
            "description": "The activity to remove (Activity ID)",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Removes a activity from the team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "edit_team"
            ]
          }
        ]
      }
    },
    "/api/timesheets": {
      "get": {
        "tags": [
          "Timesheet"
        ],
        "summary": "Fetch timesheets",
        "operationId": "get_timesheets",
        "parameters": [
          {
            "name": "user",
            "in": "query",
            "description": "User ID to filter timesheets. Needs permission 'view_other_timesheet', pass 'all' to fetch data for all user (default: current user)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null,
              "pattern": "\\d+|all"
            }
          },
          {
            "name": "users[]",
            "in": "query",
            "description": "List of user IDs to filter, e.g.: users[]=1&users[]=2 (ignored if user=all)",
            "required": false,
            "allowEmptyValue": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": [],
              "default": [],
              "pattern": "\\d+"
            }
          },
          {
            "name": "customer",
            "in": "query",
            "description": "Customer ID to filter timesheets",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null,
              "pattern": "\\d+"
            }
          },
          {
            "name": "customers[]",
            "in": "query",
            "description": "List of customer IDs to filter, e.g.: customers[]=1&customers[]=2",
            "required": false,
            "allowEmptyValue": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": [],
              "default": [],
              "pattern": "\\d+"
            }
          },
          {
            "name": "project",
            "in": "query",
            "description": "Project ID to filter timesheets",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null,
              "pattern": "\\d+"
            }
          },
          {
            "name": "projects[]",
            "in": "query",
            "description": "List of project IDs to filter, e.g.: projects[]=1&projects[]=2",
            "required": false,
            "allowEmptyValue": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": [],
              "default": [],
              "pattern": "\\d+"
            }
          },
          {
            "name": "activity",
            "in": "query",
            "description": "Activity ID to filter timesheets",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null,
              "pattern": "\\d+"
            }
          },
          {
            "name": "activities[]",
            "in": "query",
            "description": "List of activity IDs to filter, e.g.: activities[]=1&activities[]=2",
            "required": false,
            "allowEmptyValue": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": [],
              "default": [],
              "pattern": "\\d+"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page to display, renders a 404 if not found (default: 1)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null,
              "pattern": "\\d+"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The amount of entries for each page (default: 50)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null,
              "pattern": "\\d+"
            }
          },
          {
            "name": "tags[]",
            "in": "query",
            "description": "List of tag names, e.g. tags[]=bar&tags[]=foo",
            "required": false,
            "allowEmptyValue": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": [],
              "default": []
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The field by which results will be ordered. Allowed values: id, begin, end, rate (default: begin)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null,
              "pattern": "id|begin|end|rate"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "The result order. Allowed values: ASC, DESC (default: DESC)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null,
              "pattern": "ASC|DESC"
            }
          },
          {
            "name": "begin",
            "in": "query",
            "description": "Only records after this date will be included (format: HTML5 datetime-local, e.g. YYYY-MM-DDThh:mm:ss)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "Only records before this date will be included (format: HTML5 datetime-local, e.g. YYYY-MM-DDThh:mm:ss)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "name": "exported",
            "in": "query",
            "description": "Use this flag if you want to filter for export state. Allowed values: 0=not exported, 1=exported (default: all)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null,
              "pattern": "0|1"
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "Filter for running/active records. Allowed values: 0=stopped, 1=active (default: all)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null,
              "pattern": "0|1"
            }
          },
          {
            "name": "billable",
            "in": "query",
            "description": "Filter for non-/billable records. Allowed values: 0=non-billable, 1=billable (default: all)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null,
              "pattern": "0|1"
            }
          },
          {
            "name": "full",
            "in": "query",
            "description": "Allows to fetch full objects including subresources. Allowed values: 0|1|false|true (default: false)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null,
              "pattern": "0|1|true|false"
            }
          },
          {
            "name": "term",
            "in": "query",
            "description": "Free search term",
            "required": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "name": "modified_after",
            "in": "query",
            "description": "Only records changed after this date will be included (format: HTML5 datetime-local, e.g. YYYY-MM-DDThh:mm:ss)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of timesheets. The datetime fields are given in the users local time including the timezone offset (ISO-8601).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimesheetCollection"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "is_granted('view_own_timesheet') or is_granted('view_other_timesheet')"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Timesheet"
        ],
        "summary": "Create timesheet",
        "description": "Creates a new timesheet for the current user and returns it afterwards.",
        "operationId": "post_timesheet",
        "parameters": [
          {
            "name": "full",
            "in": "query",
            "description": "Allows to fetch fully serialized objects including subresources (TimesheetExpanded). Allowed values: true (default: false)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimesheetEditForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the new created timesheet",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "create_own_timesheet"
            ]
          }
        ]
      }
    },
    "/api/timesheets/{id}": {
      "get": {
        "tags": [
          "Timesheet"
        ],
        "summary": "Fetch timesheet",
        "operationId": "get_timesheet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Timesheet ID to fetch",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns one timesheet. Be aware that the datetime fields are given in the users local time including the timezone offset via ISO 8601.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "view"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Timesheet"
        ],
        "summary": "Delete timesheet",
        "operationId": "delete_timesheet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Timesheet ID to delete",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete one timesheet"
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "delete"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Timesheet"
        ],
        "summary": "Update timesheet",
        "description": "Update timesheet, you can pass all or just a subset of the attributes.",
        "operationId": "patch_timesheet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Timesheet ID to update",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimesheetEditForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated timesheet",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "edit"
            ]
          }
        ]
      }
    },
    "/api/timesheets/recent": {
      "get": {
        "tags": [
          "Timesheet"
        ],
        "summary": "Fetch recent user activities",
        "operationId": "get_recent_timesheet",
        "parameters": [
          {
            "name": "begin",
            "in": "query",
            "description": "Only records after this date will be included. Default: today - 1 year (format: HTML5 datetime-local, e.g. YYYY-MM-DDThh:mm:ss)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The amount of entries (default: 10)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null,
              "pattern": "\\d+"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of recent user activities (always the latest entry of a unique working set grouped by customer, project and activity)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimesheetCollectionExpanded"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "view_own_timesheet"
            ]
          }
        ]
      }
    },
    "/api/timesheets/active": {
      "get": {
        "tags": [
          "Timesheet"
        ],
        "summary": "Fetch active timesheets",
        "operationId": "get_active_timesheet",
        "responses": {
          "200": {
            "description": "Returns a collection of active timesheets for the current user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimesheetCollectionExpanded"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "view_own_timesheet"
            ]
          }
        ]
      }
    },
    "/api/timesheets/{id}/stop": {
      "get": {
        "tags": [
          "Timesheet"
        ],
        "summary": "Stop active timesheet",
        "description": "This route is available via GET and PATCH, as users over and over again run into errors when stopping.\nLikely caused by a slow JS engine and a fast-click after page reload.",
        "operationId": "get_stop_timesheet_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Timesheet ID to stop",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Stops an active timesheet and returns it afterwards.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "stop"
            ]
          }
        ],
        "x-internal": true
      },
      "patch": {
        "tags": [
          "Timesheet"
        ],
        "summary": "Stop active timesheet",
        "description": "This route is available via GET and PATCH, as users over and over again run into errors when stopping.\nLikely caused by a slow JS engine and a fast-click after page reload.",
        "operationId": "patch_stop_timesheet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "stop"
            ]
          }
        ]
      }
    },
    "/api/timesheets/{id}/restart": {
      "get": {
        "tags": [
          "Timesheet"
        ],
        "summary": "Restart timesheet",
        "description": "The restarted timesheet will be created for the current user",
        "operationId": "get_restart_timesheet_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Timesheet ID to restart",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "copy": {
                    "type": "string",
                    "default": null,
                    "pattern": "all"
                  },
                  "begin": {
                    "type": "string",
                    "default": null
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Restart a timesheet for the same customer, project, activity combination. The current user will be the owner of the new record. Kimai tries to stop running records, which is expected to fail depending on the configured rules. Data will be copied from the original record if requested.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "start"
            ]
          }
        ],
        "x-internal": true
      },
      "patch": {
        "tags": [
          "Timesheet"
        ],
        "summary": "Restart timesheet",
        "description": "The restarted timesheet will be created for the current user",
        "operationId": "patch_restart_timesheet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "copy": {
                    "type": "string",
                    "default": null,
                    "pattern": "all"
                  },
                  "begin": {
                    "type": "string",
                    "default": null
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "start"
            ]
          }
        ]
      }
    },
    "/api/timesheets/{id}/duplicate": {
      "patch": {
        "tags": [
          "Timesheet"
        ],
        "summary": "Duplicate timesheet",
        "operationId": "patch_duplicate_timesheet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Timesheet ID to duplicate",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Duplicates a timesheet, resetting the export state only.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "duplicate"
            ]
          }
        ]
      }
    },
    "/api/timesheets/{id}/export": {
      "patch": {
        "tags": [
          "Timesheet"
        ],
        "summary": "Toggle timesheet export state",
        "operationId": "patch_export_timesheet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Timesheet ID to switch export state",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Switches the exported state on the record and therefor locks / unlocks it for further updates. Needs edit_export_*_timesheet permission.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "edit_export"
            ]
          }
        ]
      }
    },
    "/api/timesheets/{id}/meta": {
      "patch": {
        "tags": [
          "Timesheet"
        ],
        "summary": "Update timesheet custom-field",
        "operationId": "patch_app_api_timesheet_meta",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Timesheet ID to set the meta-field value for",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "value"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "default": null
                  },
                  "value": {
                    "type": "string",
                    "default": null
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sets the value of an existing/configured meta-field. You cannot create unknown meta-fields, if the given name is not a configured meta-field, this will return an exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "edit"
            ]
          }
        ]
      }
    },
    "/api/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Fetch users",
        "operationId": "get_users",
        "parameters": [
          {
            "name": "visible",
            "in": "query",
            "description": "Visibility status to filter users: 1=visible, 2=hidden, 3=all",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": 1,
              "pattern": "1|2|3"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The field by which results will be ordered. Allowed values: id, username, alias, email (default: username)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null,
              "pattern": "id|username|alias|email"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "The result order. Allowed values: ASC, DESC (default: ASC)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null,
              "pattern": "ASC|DESC"
            }
          },
          {
            "name": "term",
            "in": "query",
            "description": "Free search term",
            "required": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "name": "full",
            "in": "query",
            "description": "Allows to fetch full objects including subresources. Allowed values: 0|1|false|true (default: false)",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": null,
              "pattern": "0|1|true|false"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of users. Required permission: view_user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserCollection"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "view_user"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create user",
        "description": "Creates a new user and returns it afterwards",
        "operationId": "post_user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateForm"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "create_user"
            ]
          }
        ]
      }
    },
    "/api/users/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Fetch user",
        "operationId": "get_user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID to fetch",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return one user entity.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "view"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Update an existing user",
        "description": "Update an existing user, you can pass all or just a subset of all attributes (passing roles will replace all existing ones)",
        "operationId": "patch_user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID to update",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserEditForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API",
              "edit"
            ]
          }
        ]
      }
    },
    "/api/users/me": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Fetch current user",
        "operationId": "get_me_user",
        "responses": {
          "200": {
            "description": "Return the current user entity.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntity"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "API"
            ]
          }
        ]
      }
    },
    "/api/users/api-token/{id}": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete API token",
        "description": "This ONLY works if the given API token exists and belongs to the current user",
        "operationId": "delete_api_token",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The API token ID to remove",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success if the token could be deleted."
          }
        },
        "security": [
          {
            "bearer": [
              "API"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "InvoiceCollection": {
        "required": [
          "invoiceNumber",
          "customer",
          "user",
          "createdAt",
          "currency"
        ],
        "properties": {
          "id": {
            "title": "Unique invoice ID",
            "type": "integer"
          },
          "invoiceNumber": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "total": {
            "type": "number",
            "format": "float",
            "default": 0
          },
          "tax": {
            "type": "number",
            "format": "float",
            "default": 0
          },
          "currency": {
            "type": "string",
            "maxLength": 3
          },
          "dueDays": {
            "type": "integer",
            "default": 30,
            "maximum": 999,
            "minimum": 0
          },
          "vat": {
            "type": "number",
            "format": "float",
            "default": 0
          },
          "status": {
            "type": "string",
            "default": "new"
          },
          "paymentDate": {
            "type": "string",
            "format": "date-time"
          },
          "metaFields": {
            "title": "Meta fields registered with the invoice",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceMeta"
            }
          }
        },
        "type": "object"
      },
      "Invoice": {
        "required": [
          "invoiceNumber",
          "customer",
          "user",
          "createdAt",
          "currency"
        ],
        "properties": {
          "id": {
            "title": "Unique invoice ID",
            "type": "integer"
          },
          "invoiceNumber": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "total": {
            "type": "number",
            "format": "float",
            "default": 0
          },
          "tax": {
            "type": "number",
            "format": "float",
            "default": 0
          },
          "currency": {
            "type": "string",
            "maxLength": 3
          },
          "dueDays": {
            "type": "integer",
            "default": 30,
            "maximum": 999,
            "minimum": 0
          },
          "vat": {
            "type": "number",
            "format": "float",
            "default": 0
          },
          "status": {
            "type": "string",
            "default": "new"
          },
          "paymentDate": {
            "type": "string",
            "format": "date-time"
          },
          "metaFields": {
            "title": "Meta fields registered with the invoice",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceMeta"
            }
          }
        },
        "type": "object"
      },
      "TeamMembership": {
        "required": [
          "team"
        ],
        "properties": {
          "team": {
            "$ref": "#/components/schemas/Team"
          },
          "teamlead": {
            "type": "boolean",
            "default": false
          }
        },
        "type": "object"
      },
      "TeamMember": {
        "required": [
          "user"
        ],
        "properties": {
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "teamlead": {
            "type": "boolean",
            "default": false
          }
        },
        "type": "object"
      },
      "TeamCollection": {
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "title": "Team name",
            "type": "string",
            "maxLength": 100,
            "minLength": 2
          },
          "color": {
            "title": "The assigned color in HTML hex format, e.g. #dd1d00",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Team": {
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "title": "Team name",
            "type": "string",
            "maxLength": 100,
            "minLength": 2
          },
          "members": {
            "title": "All team member (including team leads)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamMember"
            },
            "minItems": 1
          },
          "customers": {
            "title": "Customers assigned to the team",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Customer"
            }
          },
          "projects": {
            "title": "Projects assigned to the team",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Project"
            }
          },
          "activities": {
            "title": "Activities assigned to the team",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Activity"
            }
          },
          "color": {
            "title": "The assigned color in HTML hex format, e.g. #dd1d00",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TeamEditForm": {
        "required": [
          "name",
          "members"
        ],
        "properties": {
          "name": {
            "description": "Name of the team",
            "type": "string"
          },
          "color": {
            "description": "The hexadecimal color code (default: auto-calculated by name)",
            "type": "string"
          },
          "members": {
            "description": "All team members",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "user": {
                  "type": "integer",
                  "description": "User ID"
                },
                "teamlead": {
                  "type": "boolean",
                  "description": "Whether the user is a teamlead"
                }
              }
            }
          }
        },
        "type": "object"
      },
      "UserCollection": {
        "required": [
          "username"
        ],
        "properties": {
          "apiToken": {
            "type": "boolean"
          },
          "initials": {
            "type": "string"
          },
          "id": {
            "title": "Unique User ID",
            "type": "integer"
          },
          "alias": {
            "title": "The user alias will be displayed in the frontend instead of the username",
            "type": "string",
            "maxLength": 60
          },
          "title": {
            "title": "An additional title for the user, like the Job position or Department",
            "type": "string",
            "maxLength": 50
          },
          "username": {
            "type": "string",
            "maxLength": 64,
            "minLength": 2,
            "pattern": "((?!/).)*"
          },
          "accountNumber": {
            "type": "string",
            "maxLength": 30
          },
          "enabled": {
            "type": "boolean",
            "default": false
          },
          "color": {
            "title": "The assigned color in HTML hex format, e.g. #dd1d00",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserEntity": {
        "required": [
          "memberships",
          "username"
        ],
        "properties": {
          "apiToken": {
            "type": "boolean"
          },
          "preferences": {
            "title": "Read-only list of all visible user preferences.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserPreference"
            }
          },
          "locale": {
            "title": "The locale used for formatting number, money, dates and times",
            "type": "string"
          },
          "timezone": {
            "type": "string"
          },
          "language": {
            "title": "The locale used for translations",
            "type": "string"
          },
          "teams": {
            "title": "List of all teams, this user is part of",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Team"
            }
          },
          "initials": {
            "type": "string"
          },
          "id": {
            "title": "Unique User ID",
            "type": "integer"
          },
          "alias": {
            "title": "The user alias will be displayed in the frontend instead of the username",
            "type": "string",
            "maxLength": 60
          },
          "title": {
            "title": "An additional title for the user, like the Job position or Department",
            "type": "string",
            "maxLength": 50
          },
          "avatar": {
            "title": "URL to the user avatar, will be auto-generated if empty",
            "type": "string",
            "maxLength": 255
          },
          "memberships": {
            "title": "List of all team memberships.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamMembership"
            }
          },
          "username": {
            "type": "string",
            "maxLength": 64,
            "minLength": 2,
            "pattern": "((?!/).)*"
          },
          "accountNumber": {
            "type": "string",
            "maxLength": 30
          },
          "enabled": {
            "type": "boolean",
            "default": false
          },
          "roles": {
            "title": "List of all role names",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "supervisor": {
            "$ref": "#/components/schemas/User"
          },
          "color": {
            "title": "The assigned color in HTML hex format, e.g. #dd1d00",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserPreference": {
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 2
          },
          "value": {
            "type": "string",
            "default": null,
            "maxLength": 250,
            "nullable": true
          }
        },
        "type": "object"
      },
      "User": {
        "required": [
          "username"
        ],
        "properties": {
          "apiToken": {
            "type": "boolean"
          },
          "initials": {
            "type": "string"
          },
          "id": {
            "title": "Unique User ID",
            "type": "integer"
          },
          "alias": {
            "title": "The user alias will be displayed in the frontend instead of the username",
            "type": "string",
            "maxLength": 60
          },
          "title": {
            "title": "An additional title for the user, like the Job position or Department",
            "type": "string",
            "maxLength": 50
          },
          "username": {
            "type": "string",
            "maxLength": 64,
            "minLength": 2,
            "pattern": "((?!/).)*"
          },
          "accountNumber": {
            "type": "string",
            "maxLength": 30
          },
          "enabled": {
            "type": "boolean",
            "default": false
          },
          "color": {
            "title": "The assigned color in HTML hex format, e.g. #dd1d00",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserEditForm": {
        "required": [
          "email",
          "language",
          "locale",
          "timezone"
        ],
        "properties": {
          "alias": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "accountNumber": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "color": {
            "description": "The hexadecimal color code (default: auto-calculated by name)",
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "language": {
            "type": "string",
            "enum": [
              "ar",
              "cs",
              "da",
              "de",
              "de_CH",
              "el",
              "en",
              "eo",
              "es",
              "eu",
              "fa",
              "fi",
              "fo",
              "fr",
              "he",
              "hr",
              "hu",
              "id",
              "it",
              "ja",
              "ko",
              "nb_NO",
              "nl",
              "pa",
              "pl",
              "pt",
              "pt_BR",
              "ro",
              "ru",
              "sk",
              "sl",
              "sv",
              "ta",
              "tr",
              "uk",
              "vi",
              "zh_CN",
              "zh_Hant",
              "zh_Hant_TW"
            ]
          },
          "locale": {
            "type": "string",
            "enum": [
              "ar",
              "cs",
              "cs_CZ",
              "da",
              "da_DK",
              "da_GL",
              "de",
              "de_AT",
              "de_BE",
              "de_CH",
              "de_DE",
              "de_IT",
              "de_LI",
              "de_LU",
              "el",
              "el_CY",
              "el_GR",
              "en",
              "en_AE",
              "en_AG",
              "en_AI",
              "en_AS",
              "en_AT",
              "en_AU",
              "en_BB",
              "en_BE",
              "en_BI",
              "en_BM",
              "en_BS",
              "en_BW",
              "en_BZ",
              "en_CA",
              "en_CC",
              "en_CH",
              "en_CK",
              "en_CM",
              "en_CX",
              "en_CY",
              "en_CZ",
              "en_DE",
              "en_DK",
              "en_DM",
              "en_ER",
              "en_ES",
              "en_FI",
              "en_FJ",
              "en_FK",
              "en_FM",
              "en_FR",
              "en_GB",
              "en_GD",
              "en_GG",
              "en_GH",
              "en_GI",
              "en_GM",
              "en_GS",
              "en_GU",
              "en_GY",
              "en_HK",
              "en_HU",
              "en_ID",
              "en_IE",
              "en_IL",
              "en_IM",
              "en_IN",
              "en_IO",
              "en_IT",
              "en_JE",
              "en_JM",
              "en_KE",
              "en_KI",
              "en_KN",
              "en_KY",
              "en_LC",
              "en_LR",
              "en_LS",
              "en_MG",
              "en_MH",
              "en_MO",
              "en_MP",
              "en_MS",
              "en_MT",
              "en_MU",
              "en_MV",
              "en_MW",
              "en_MY",
              "en_NA",
              "en_NF",
              "en_NG",
              "en_NL",
              "en_NO",
              "en_NR",
              "en_NU",
              "en_NZ",
              "en_PG",
              "en_PH",
              "en_PK",
              "en_PL",
              "en_PN",
              "en_PR",
              "en_PT",
              "en_PW",
              "en_RO",
              "en_RW",
              "en_SB",
              "en_SC",
              "en_SD",
              "en_SE",
              "en_SG",
              "en_SH",
              "en_SI",
              "en_SK",
              "en_SL",
              "en_SS",
              "en_SX",
              "en_SZ",
              "en_TC",
              "en_TK",
              "en_TO",
              "en_TT",
              "en_TV",
              "en_TZ",
              "en_UG",
              "en_UM",
              "en_US",
              "en_VC",
              "en_VG",
              "en_VI",
              "en_VU",
              "en_WS",
              "en_ZA",
              "en_ZM",
              "en_ZW",
              "eo",
              "es",
              "es_AR",
              "es_BO",
              "es_BR",
              "es_BZ",
              "es_CL",
              "es_CO",
              "es_CR",
              "es_CU",
              "es_DO",
              "es_EC",
              "es_ES",
              "es_GQ",
              "es_GT",
              "es_HN",
              "es_MX",
              "es_NI",
              "es_PA",
              "es_PE",
              "es_PH",
              "es_PR",
              "es_PY",
              "es_SV",
              "es_US",
              "es_UY",
              "es_VE",
              "eu",
              "eu_ES",
              "fa",
              "fa_AF",
              "fa_IR",
              "fi",
              "fi_FI",
              "fo",
              "fo_DK",
              "fo_FO",
              "fr",
              "fr_BE",
              "fr_BF",
              "fr_BI",
              "fr_BJ",
              "fr_BL",
              "fr_CA",
              "fr_CD",
              "fr_CF",
              "fr_CG",
              "fr_CH",
              "fr_CI",
              "fr_CM",
              "fr_DJ",
              "fr_DZ",
              "fr_FR",
              "fr_GA",
              "fr_GF",
              "fr_GN",
              "fr_GP",
              "fr_GQ",
              "fr_HT",
              "fr_KM",
              "fr_LU",
              "fr_MA",
              "fr_MC",
              "fr_MF",
              "fr_MG",
              "fr_ML",
              "fr_MQ",
              "fr_MR",
              "fr_MU",
              "fr_NC",
              "fr_NE",
              "fr_PF",
              "fr_PM",
              "fr_RE",
              "fr_RW",
              "fr_SC",
              "fr_SN",
              "fr_SY",
              "fr_TD",
              "fr_TG",
              "fr_TN",
              "fr_VU",
              "fr_WF",
              "fr_YT",
              "he",
              "he_IL",
              "hr",
              "hr_BA",
              "hr_HR",
              "hu",
              "hu_HU",
              "id",
              "it",
              "it_CH",
              "it_IT",
              "it_SM",
              "it_VA",
              "ja",
              "ja_JP",
              "ko",
              "ko_CN",
              "ko_KP",
              "ko_KR",
              "nb_NO",
              "nl",
              "nl_AW",
              "nl_BE",
              "nl_BQ",
              "nl_CW",
              "nl_NL",
              "nl_SR",
              "nl_SX",
              "pa",
              "pl",
              "pl_PL",
              "pt",
              "pt_AO",
              "pt_BR",
              "pt_CH",
              "pt_CV",
              "pt_GQ",
              "pt_GW",
              "pt_LU",
              "pt_MO",
              "pt_MZ",
              "pt_PT",
              "pt_ST",
              "pt_TL",
              "ro",
              "ro_MD",
              "ro_RO",
              "ru",
              "ru_BY",
              "ru_KG",
              "ru_KZ",
              "ru_MD",
              "ru_RU",
              "ru_UA",
              "sk",
              "sk_SK",
              "sl",
              "sv",
              "sv_AX",
              "sv_FI",
              "sv_SE",
              "ta",
              "tr",
              "tr_CY",
              "tr_TR",
              "uk",
              "uk_UA",
              "vi",
              "vi_VN",
              "zh_CN",
              "zh_Hant",
              "zh_Hant_TW"
            ]
          },
          "timezone": {
            "type": "string"
          },
          "supervisor": {
            "description": "User ID",
            "type": "integer",
            "example": 1
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ROLE_TEAMLEAD",
                "ROLE_ADMIN",
                "ROLE_SUPER_ADMIN"
              ]
            }
          },
          "enabled": {
            "type": "boolean"
          },
          "systemAccount": {
            "type": "boolean"
          },
          "requiresPasswordReset": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "UserCreateForm": {
        "required": [
          "username",
          "email",
          "language",
          "locale",
          "timezone",
          "plainPassword"
        ],
        "properties": {
          "username": {
            "type": "string"
          },
          "alias": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "accountNumber": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "color": {
            "description": "The hexadecimal color code (default: auto-calculated by name)",
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "language": {
            "type": "string",
            "enum": [
              "ar",
              "cs",
              "da",
              "de",
              "de_CH",
              "el",
              "en",
              "eo",
              "es",
              "eu",
              "fa",
              "fi",
              "fo",
              "fr",
              "he",
              "hr",
              "hu",
              "id",
              "it",
              "ja",
              "ko",
              "nb_NO",
              "nl",
              "pa",
              "pl",
              "pt",
              "pt_BR",
              "ro",
              "ru",
              "sk",
              "sl",
              "sv",
              "ta",
              "tr",
              "uk",
              "vi",
              "zh_CN",
              "zh_Hant",
              "zh_Hant_TW"
            ]
          },
          "locale": {
            "type": "string",
            "enum": [
              "ar",
              "cs",
              "cs_CZ",
              "da",
              "da_DK",
              "da_GL",
              "de",
              "de_AT",
              "de_BE",
              "de_CH",
              "de_DE",
              "de_IT",
              "de_LI",
              "de_LU",
              "el",
              "el_CY",
              "el_GR",
              "en",
              "en_AE",
              "en_AG",
              "en_AI",
              "en_AS",
              "en_AT",
              "en_AU",
              "en_BB",
              "en_BE",
              "en_BI",
              "en_BM",
              "en_BS",
              "en_BW",
              "en_BZ",
              "en_CA",
              "en_CC",
              "en_CH",
              "en_CK",
              "en_CM",
              "en_CX",
              "en_CY",
              "en_CZ",
              "en_DE",
              "en_DK",
              "en_DM",
              "en_ER",
              "en_ES",
              "en_FI",
              "en_FJ",
              "en_FK",
              "en_FM",
              "en_FR",
              "en_GB",
              "en_GD",
              "en_GG",
              "en_GH",
              "en_GI",
              "en_GM",
              "en_GS",
              "en_GU",
              "en_GY",
              "en_HK",
              "en_HU",
              "en_ID",
              "en_IE",
              "en_IL",
              "en_IM",
              "en_IN",
              "en_IO",
              "en_IT",
              "en_JE",
              "en_JM",
              "en_KE",
              "en_KI",
              "en_KN",
              "en_KY",
              "en_LC",
              "en_LR",
              "en_LS",
              "en_MG",
              "en_MH",
              "en_MO",
              "en_MP",
              "en_MS",
              "en_MT",
              "en_MU",
              "en_MV",
              "en_MW",
              "en_MY",
              "en_NA",
              "en_NF",
              "en_NG",
              "en_NL",
              "en_NO",
              "en_NR",
              "en_NU",
              "en_NZ",
              "en_PG",
              "en_PH",
              "en_PK",
              "en_PL",
              "en_PN",
              "en_PR",
              "en_PT",
              "en_PW",
              "en_RO",
              "en_RW",
              "en_SB",
              "en_SC",
              "en_SD",
              "en_SE",
              "en_SG",
              "en_SH",
              "en_SI",
              "en_SK",
              "en_SL",
              "en_SS",
              "en_SX",
              "en_SZ",
              "en_TC",
              "en_TK",
              "en_TO",
              "en_TT",
              "en_TV",
              "en_TZ",
              "en_UG",
              "en_UM",
              "en_US",
              "en_VC",
              "en_VG",
              "en_VI",
              "en_VU",
              "en_WS",
              "en_ZA",
              "en_ZM",
              "en_ZW",
              "eo",
              "es",
              "es_AR",
              "es_BO",
              "es_BR",
              "es_BZ",
              "es_CL",
              "es_CO",
              "es_CR",
              "es_CU",
              "es_DO",
              "es_EC",
              "es_ES",
              "es_GQ",
              "es_GT",
              "es_HN",
              "es_MX",
              "es_NI",
              "es_PA",
              "es_PE",
              "es_PH",
              "es_PR",
              "es_PY",
              "es_SV",
              "es_US",
              "es_UY",
              "es_VE",
              "eu",
              "eu_ES",
              "fa",
              "fa_AF",
              "fa_IR",
              "fi",
              "fi_FI",
              "fo",
              "fo_DK",
              "fo_FO",
              "fr",
              "fr_BE",
              "fr_BF",
              "fr_BI",
              "fr_BJ",
              "fr_BL",
              "fr_CA",
              "fr_CD",
              "fr_CF",
              "fr_CG",
              "fr_CH",
              "fr_CI",
              "fr_CM",
              "fr_DJ",
              "fr_DZ",
              "fr_FR",
              "fr_GA",
              "fr_GF",
              "fr_GN",
              "fr_GP",
              "fr_GQ",
              "fr_HT",
              "fr_KM",
              "fr_LU",
              "fr_MA",
              "fr_MC",
              "fr_MF",
              "fr_MG",
              "fr_ML",
              "fr_MQ",
              "fr_MR",
              "fr_MU",
              "fr_NC",
              "fr_NE",
              "fr_PF",
              "fr_PM",
              "fr_RE",
              "fr_RW",
              "fr_SC",
              "fr_SN",
              "fr_SY",
              "fr_TD",
              "fr_TG",
              "fr_TN",
              "fr_VU",
              "fr_WF",
              "fr_YT",
              "he",
              "he_IL",
              "hr",
              "hr_BA",
              "hr_HR",
              "hu",
              "hu_HU",
              "id",
              "it",
              "it_CH",
              "it_IT",
              "it_SM",
              "it_VA",
              "ja",
              "ja_JP",
              "ko",
              "ko_CN",
              "ko_KP",
              "ko_KR",
              "nb_NO",
              "nl",
              "nl_AW",
              "nl_BE",
              "nl_BQ",
              "nl_CW",
              "nl_NL",
              "nl_SR",
              "nl_SX",
              "pa",
              "pl",
              "pl_PL",
              "pt",
              "pt_AO",
              "pt_BR",
              "pt_CH",
              "pt_CV",
              "pt_GQ",
              "pt_GW",
              "pt_LU",
              "pt_MO",
              "pt_MZ",
              "pt_PT",
              "pt_ST",
              "pt_TL",
              "ro",
              "ro_MD",
              "ro_RO",
              "ru",
              "ru_BY",
              "ru_KG",
              "ru_KZ",
              "ru_MD",
              "ru_RU",
              "ru_UA",
              "sk",
              "sk_SK",
              "sl",
              "sv",
              "sv_AX",
              "sv_FI",
              "sv_SE",
              "ta",
              "tr",
              "tr_CY",
              "tr_TR",
              "uk",
              "uk_UA",
              "vi",
              "vi_VN",
              "zh_CN",
              "zh_Hant",
              "zh_Hant_TW"
            ]
          },
          "timezone": {
            "type": "string"
          },
          "supervisor": {
            "description": "User ID",
            "type": "integer",
            "example": 1
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ROLE_TEAMLEAD",
                "ROLE_ADMIN",
                "ROLE_SUPER_ADMIN"
              ]
            }
          },
          "plainPassword": {
            "description": "Plain text password",
            "type": "string"
          },
          "plainApiToken": {
            "description": "Plain API token",
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "systemAccount": {
            "type": "boolean"
          },
          "requiresPasswordReset": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "TimesheetCollectionExpanded": {
        "required": [
          "begin",
          "user",
          "activity",
          "project"
        ],
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "title": "Unique Timesheet ID",
            "type": "integer"
          },
          "begin": {
            "title": "Time records start date-time.",
            "description": "Attention: Accessor MUST be used, otherwise date will be serialized in UTC.",
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "title": "Time records end date-time.",
            "description": "Attention: Accessor MUST be used, otherwise date will be serialized in UTC.",
            "type": "string",
            "format": "date-time"
          },
          "duration": {
            "type": "integer",
            "default": 0
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "activity": {
            "$ref": "#/components/schemas/ActivityExpanded"
          },
          "project": {
            "$ref": "#/components/schemas/ProjectExpanded"
          },
          "description": {
            "type": "string"
          },
          "rate": {
            "type": "number",
            "format": "float",
            "default": 0,
            "minimum": 0
          },
          "internalRate": {
            "type": "number",
            "format": "float"
          },
          "exported": {
            "type": "boolean",
            "default": false
          },
          "billable": {
            "type": "boolean",
            "default": true
          },
          "metaFields": {
            "title": "Meta fields registered with the timesheet",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimesheetMeta"
            }
          }
        },
        "type": "object"
      },
      "TimesheetCollection": {
        "required": [
          "begin"
        ],
        "properties": {
          "activity": {
            "type": "integer"
          },
          "project": {
            "type": "integer"
          },
          "user": {
            "type": "integer"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "title": "Unique Timesheet ID",
            "type": "integer"
          },
          "begin": {
            "title": "Time records start date-time.",
            "description": "Attention: Accessor MUST be used, otherwise date will be serialized in UTC.",
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "title": "Time records end date-time.",
            "description": "Attention: Accessor MUST be used, otherwise date will be serialized in UTC.",
            "type": "string",
            "format": "date-time"
          },
          "duration": {
            "type": "integer",
            "default": 0
          },
          "description": {
            "type": "string"
          },
          "rate": {
            "type": "number",
            "format": "float",
            "default": 0,
            "minimum": 0
          },
          "internalRate": {
            "type": "number",
            "format": "float"
          },
          "exported": {
            "type": "boolean",
            "default": false
          },
          "billable": {
            "type": "boolean",
            "default": true
          },
          "metaFields": {
            "title": "Meta fields registered with the timesheet",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimesheetMeta"
            }
          }
        },
        "type": "object"
      },
      "TimesheetExpanded": {
        "required": [
          "begin",
          "user",
          "activity",
          "project"
        ],
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "title": "Unique Timesheet ID",
            "type": "integer"
          },
          "begin": {
            "title": "Time records start date-time.",
            "description": "Attention: Accessor MUST be used, otherwise date will be serialized in UTC.",
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "title": "Time records end date-time.",
            "description": "Attention: Accessor MUST be used, otherwise date will be serialized in UTC.",
            "type": "string",
            "format": "date-time"
          },
          "duration": {
            "type": "integer",
            "default": 0
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "activity": {
            "$ref": "#/components/schemas/ActivityExpanded"
          },
          "project": {
            "$ref": "#/components/schemas/ProjectExpanded"
          },
          "description": {
            "type": "string"
          },
          "rate": {
            "type": "number",
            "format": "float",
            "default": 0,
            "minimum": 0
          },
          "internalRate": {
            "type": "number",
            "format": "float"
          },
          "fixedRate": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "hourlyRate": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "exported": {
            "type": "boolean",
            "default": false
          },
          "billable": {
            "type": "boolean",
            "default": true
          },
          "metaFields": {
            "title": "Meta fields registered with the timesheet",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimesheetMeta"
            }
          }
        },
        "type": "object"
      },
      "TimesheetEntity": {
        "required": [
          "begin"
        ],
        "properties": {
          "activity": {
            "type": "integer"
          },
          "project": {
            "type": "integer"
          },
          "user": {
            "type": "integer"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "title": "Unique Timesheet ID",
            "type": "integer"
          },
          "begin": {
            "title": "Time records start date-time.",
            "description": "Attention: Accessor MUST be used, otherwise date will be serialized in UTC.",
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "title": "Time records end date-time.",
            "description": "Attention: Accessor MUST be used, otherwise date will be serialized in UTC.",
            "type": "string",
            "format": "date-time"
          },
          "duration": {
            "type": "integer",
            "default": 0
          },
          "description": {
            "type": "string"
          },
          "rate": {
            "type": "number",
            "format": "float",
            "default": 0,
            "minimum": 0
          },
          "internalRate": {
            "type": "number",
            "format": "float"
          },
          "fixedRate": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "hourlyRate": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "exported": {
            "type": "boolean",
            "default": false
          },
          "billable": {
            "type": "boolean",
            "default": true
          },
          "metaFields": {
            "title": "Meta fields registered with the timesheet",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimesheetMeta"
            }
          }
        },
        "type": "object"
      },
      "TimesheetEditForm": {
        "required": [
          "project",
          "activity"
        ],
        "properties": {
          "begin": {
            "description": "If no begin date-time is set, the users current timestamp will be used",
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "description": "If no end date-time is set, the timesheet will be running",
            "type": "string",
            "format": "date-time"
          },
          "project": {
            "description": "Project ID",
            "type": "integer"
          },
          "activity": {
            "description": "Activity ID",
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "fixedRate": {
            "description": "Fixed rate",
            "type": "number"
          },
          "hourlyRate": {
            "description": "Hourly rate",
            "type": "number"
          },
          "user": {
            "description": "User ID",
            "type": "integer",
            "example": 1
          },
          "tags": {
            "description": "Comma separated list of tags",
            "type": "string"
          },
          "exported": {
            "type": "boolean"
          },
          "billable": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "TagEntity": {
        "required": [
          "name"
        ],
        "properties": {
          "color-safe": {
            "type": "string"
          },
          "id": {
            "title": "Internal Tag ID",
            "type": "integer"
          },
          "name": {
            "title": "The tag name",
            "type": "string",
            "maxLength": 100,
            "minLength": 2,
            "pattern": "((?!,).)*"
          },
          "visible": {
            "type": "boolean",
            "default": true
          },
          "color": {
            "title": "The assigned color in HTML hex format, e.g. #dd1d00",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TagEditForm": {
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "The tag name (forbidden character: comma)",
            "type": "string"
          },
          "color": {
            "description": "The hexadecimal color code (default: auto-calculated by name)",
            "type": "string"
          },
          "visible": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ActivityCollection": {
        "required": [
          "name"
        ],
        "properties": {
          "parentTitle": {
            "type": "string"
          },
          "project": {
            "type": "integer"
          },
          "id": {
            "title": "Unique activity ID",
            "type": "integer"
          },
          "name": {
            "title": "Name of this activity",
            "type": "string",
            "maxLength": 150,
            "minLength": 2
          },
          "comment": {
            "title": "Description of this activity",
            "type": "string"
          },
          "visible": {
            "title": "Whether this activity is visible and can be selected",
            "type": "boolean",
            "default": true
          },
          "billable": {
            "type": "boolean",
            "default": true
          },
          "metaFields": {
            "title": "Meta fields registered with the activity",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityMeta"
            }
          },
          "teams": {
            "title": "Teams with access to the activity",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Team"
            }
          },
          "number": {
            "type": "string",
            "maxLength": 10
          },
          "color": {
            "title": "The assigned color in HTML hex format, e.g. #dd1d00",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActivityRateForm": {
        "required": [
          "rate"
        ],
        "properties": {
          "user": {
            "description": "User ID",
            "type": "integer",
            "example": 1
          },
          "rate": {
            "description": "The rate (eg. 10.5)",
            "type": "number"
          },
          "internalRate": {
            "description": "The internal rate (eg. 10.0 or 10)",
            "type": "number"
          },
          "isFixed": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ActivityRate": {
        "properties": {
          "id": {
            "type": "integer"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "rate": {
            "type": "number",
            "format": "float",
            "default": 0,
            "minimum": 0
          },
          "internalRate": {
            "type": "number",
            "format": "float"
          },
          "isFixed": {
            "type": "boolean",
            "default": false
          }
        },
        "type": "object"
      },
      "ActivityExpanded": {
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "title": "Unique activity ID",
            "type": "integer"
          },
          "project": {
            "$ref": "#/components/schemas/ProjectExpanded"
          },
          "name": {
            "title": "Name of this activity",
            "type": "string",
            "maxLength": 150,
            "minLength": 2
          },
          "comment": {
            "title": "Description of this activity",
            "type": "string"
          },
          "visible": {
            "title": "Whether this activity is visible and can be selected",
            "type": "boolean",
            "default": true
          },
          "billable": {
            "type": "boolean",
            "default": true
          },
          "number": {
            "type": "string",
            "maxLength": 10
          },
          "color": {
            "title": "The assigned color in HTML hex format, e.g. #dd1d00",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Activity": {
        "required": [
          "name"
        ],
        "properties": {
          "project": {
            "type": "integer"
          },
          "id": {
            "title": "Unique activity ID",
            "type": "integer"
          },
          "name": {
            "title": "Name of this activity",
            "type": "string",
            "maxLength": 150,
            "minLength": 2
          },
          "comment": {
            "title": "Description of this activity",
            "type": "string"
          },
          "visible": {
            "title": "Whether this activity is visible and can be selected",
            "type": "boolean",
            "default": true
          },
          "billable": {
            "type": "boolean",
            "default": true
          },
          "number": {
            "type": "string",
            "maxLength": 10
          },
          "color": {
            "title": "The assigned color in HTML hex format, e.g. #dd1d00",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActivityEntity": {
        "required": [
          "name"
        ],
        "properties": {
          "parentTitle": {
            "type": "string"
          },
          "project": {
            "type": "integer"
          },
          "id": {
            "title": "Unique activity ID",
            "type": "integer"
          },
          "name": {
            "title": "Name of this activity",
            "type": "string",
            "maxLength": 150,
            "minLength": 2
          },
          "comment": {
            "title": "Description of this activity",
            "type": "string"
          },
          "visible": {
            "title": "Whether this activity is visible and can be selected",
            "type": "boolean",
            "default": true
          },
          "billable": {
            "type": "boolean",
            "default": true
          },
          "metaFields": {
            "title": "Meta fields registered with the activity",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityMeta"
            }
          },
          "teams": {
            "title": "Teams with access to the activity",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Team"
            }
          },
          "number": {
            "type": "string",
            "maxLength": 10
          },
          "budget": {
            "title": "The total monetary budget, will be zero if not configured.",
            "type": "number",
            "format": "float",
            "default": 0
          },
          "timeBudget": {
            "title": "The time budget in seconds, will be zero if not configured.",
            "type": "integer",
            "default": 0,
            "maximum": 2145600000,
            "minimum": 0
          },
          "budgetType": {
            "title": "The type of budget:\n - null      = default / full time\n - month     = monthly budget",
            "type": "string"
          },
          "color": {
            "title": "The assigned color in HTML hex format, e.g. #dd1d00",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActivityEditForm": {
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "number": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "invoiceText": {
            "type": "string"
          },
          "project": {
            "description": "Project ID",
            "type": "integer"
          },
          "teams": {
            "description": "Team ID",
            "type": "integer"
          },
          "color": {
            "description": "The hexadecimal color code (default: auto-calculated by name)",
            "type": "string"
          },
          "visible": {
            "type": "boolean"
          },
          "billable": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ProjectCollection": {
        "required": [
          "name"
        ],
        "properties": {
          "parentTitle": {
            "type": "string"
          },
          "customer": {
            "type": "integer"
          },
          "id": {
            "title": "Unique Project ID",
            "type": "integer"
          },
          "name": {
            "title": "Project name",
            "type": "string",
            "maxLength": 150,
            "minLength": 2
          },
          "start": {
            "title": "Project start date (times before this date cannot be recorded)",
            "description": "Attention: Accessor MUST be used, otherwise date will be serialized in UTC.",
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "title": "Project end time (times after this date cannot be recorded)",
            "description": "Attention: Accessor MUST be used, otherwise date will be serialized in UTC.",
            "type": "string",
            "format": "date-time"
          },
          "comment": {
            "type": "string"
          },
          "visible": {
            "title": "If the project is not visible, times cannot be recorded",
            "type": "boolean",
            "default": true
          },
          "billable": {
            "type": "boolean",
            "default": true
          },
          "metaFields": {
            "title": "Meta fields registered with the project",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectMeta"
            }
          },
          "teams": {
            "title": "Teams with access to the project",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Team"
            }
          },
          "globalActivities": {
            "title": "Whether this project allows booking of global activities",
            "type": "boolean",
            "default": true
          },
          "number": {
            "type": "string",
            "maxLength": 10
          },
          "color": {
            "title": "The assigned color in HTML hex format, e.g. #dd1d00",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProjectRateForm": {
        "required": [
          "rate"
        ],
        "properties": {
          "user": {
            "description": "User ID",
            "type": "integer",
            "example": 1
          },
          "rate": {
            "description": "The rate (eg. 10.5)",
            "type": "number"
          },
          "internalRate": {
            "description": "The internal rate (eg. 10.0 or 10)",
            "type": "number"
          },
          "isFixed": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ProjectRate": {
        "properties": {
          "id": {
            "type": "integer"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "rate": {
            "type": "number",
            "format": "float",
            "default": 0,
            "minimum": 0
          },
          "internalRate": {
            "type": "number",
            "format": "float"
          },
          "isFixed": {
            "type": "boolean",
            "default": false
          }
        },
        "type": "object"
      },
      "ProjectExpanded": {
        "required": [
          "customer",
          "name"
        ],
        "properties": {
          "id": {
            "title": "Unique Project ID",
            "type": "integer"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "name": {
            "title": "Project name",
            "type": "string",
            "maxLength": 150,
            "minLength": 2
          },
          "comment": {
            "type": "string"
          },
          "visible": {
            "title": "If the project is not visible, times cannot be recorded",
            "type": "boolean",
            "default": true
          },
          "billable": {
            "type": "boolean",
            "default": true
          },
          "globalActivities": {
            "title": "Whether this project allows booking of global activities",
            "type": "boolean",
            "default": true
          },
          "number": {
            "type": "string",
            "maxLength": 10
          },
          "color": {
            "title": "The assigned color in HTML hex format, e.g. #dd1d00",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Project": {
        "required": [
          "name"
        ],
        "properties": {
          "customer": {
            "type": "integer"
          },
          "id": {
            "title": "Unique Project ID",
            "type": "integer"
          },
          "name": {
            "title": "Project name",
            "type": "string",
            "maxLength": 150,
            "minLength": 2
          },
          "comment": {
            "type": "string"
          },
          "visible": {
            "title": "If the project is not visible, times cannot be recorded",
            "type": "boolean",
            "default": true
          },
          "billable": {
            "type": "boolean",
            "default": true
          },
          "globalActivities": {
            "title": "Whether this project allows booking of global activities",
            "type": "boolean",
            "default": true
          },
          "number": {
            "type": "string",
            "maxLength": 10
          },
          "color": {
            "title": "The assigned color in HTML hex format, e.g. #dd1d00",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProjectEntity": {
        "required": [
          "name"
        ],
        "properties": {
          "parentTitle": {
            "type": "string"
          },
          "customer": {
            "type": "integer"
          },
          "id": {
            "title": "Unique Project ID",
            "type": "integer"
          },
          "name": {
            "title": "Project name",
            "type": "string",
            "maxLength": 150,
            "minLength": 2
          },
          "orderNumber": {
            "title": "Project order number",
            "type": "string",
            "maxLength": 50
          },
          "orderDate": {
            "title": "Order date for the project",
            "description": "Attention: Accessor MUST be used, otherwise date will be serialized in UTC.",
            "type": "string",
            "format": "date-time"
          },
          "start": {
            "title": "Project start date (times before this date cannot be recorded)",
            "description": "Attention: Accessor MUST be used, otherwise date will be serialized in UTC.",
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "title": "Project end time (times after this date cannot be recorded)",
            "description": "Attention: Accessor MUST be used, otherwise date will be serialized in UTC.",
            "type": "string",
            "format": "date-time"
          },
          "comment": {
            "type": "string"
          },
          "visible": {
            "title": "If the project is not visible, times cannot be recorded",
            "type": "boolean",
            "default": true
          },
          "billable": {
            "type": "boolean",
            "default": true
          },
          "metaFields": {
            "title": "Meta fields registered with the project",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectMeta"
            }
          },
          "teams": {
            "title": "Teams with access to the project",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Team"
            }
          },
          "globalActivities": {
            "title": "Whether this project allows booking of global activities",
            "type": "boolean",
            "default": true
          },
          "number": {
            "type": "string",
            "maxLength": 10
          },
          "budget": {
            "title": "The total monetary budget, will be zero if not configured.",
            "type": "number",
            "format": "float",
            "default": 0
          },
          "timeBudget": {
            "title": "The time budget in seconds, will be zero if not configured.",
            "type": "integer",
            "default": 0,
            "maximum": 2145600000,
            "minimum": 0
          },
          "budgetType": {
            "title": "The type of budget:\n - null      = default / full time\n - month     = monthly budget",
            "type": "string"
          },
          "color": {
            "title": "The assigned color in HTML hex format, e.g. #dd1d00",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProjectEditForm": {
        "required": [
          "name",
          "customer"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "number": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "invoiceText": {
            "type": "string"
          },
          "orderNumber": {
            "type": "string"
          },
          "orderDate": {
            "type": "string",
            "format": "date"
          },
          "start": {
            "type": "string",
            "format": "date"
          },
          "end": {
            "type": "string",
            "format": "date"
          },
          "customer": {
            "description": "Customer ID",
            "type": "integer"
          },
          "color": {
            "description": "The hexadecimal color code (default: auto-calculated by name)",
            "type": "string"
          },
          "globalActivities": {
            "type": "boolean"
          },
          "visible": {
            "type": "boolean"
          },
          "billable": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "CustomerCollection": {
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string",
            "maxLength": 150,
            "minLength": 2
          },
          "number": {
            "type": "string",
            "maxLength": 50
          },
          "comment": {
            "type": "string"
          },
          "visible": {
            "type": "boolean",
            "default": true
          },
          "billable": {
            "type": "boolean",
            "default": true
          },
          "currency": {
            "type": "string",
            "default": "EUR",
            "maxLength": 3
          },
          "metaFields": {
            "title": "Meta fields registered with the customer",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerMeta"
            }
          },
          "teams": {
            "title": "Teams with access to the customer",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Team"
            }
          },
          "color": {
            "title": "The assigned color in HTML hex format, e.g. #dd1d00",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CustomerRateForm": {
        "required": [
          "rate"
        ],
        "properties": {
          "user": {
            "description": "User ID",
            "type": "integer",
            "example": 1
          },
          "rate": {
            "description": "The rate (eg. 10.5)",
            "type": "number"
          },
          "internalRate": {
            "description": "The internal rate (eg. 10.0 or 10)",
            "type": "number"
          },
          "isFixed": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "CustomerRate": {
        "properties": {
          "id": {
            "type": "integer"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "rate": {
            "type": "number",
            "format": "float",
            "default": 0,
            "minimum": 0
          },
          "internalRate": {
            "type": "number",
            "format": "float"
          },
          "isFixed": {
            "type": "boolean",
            "default": false
          }
        },
        "type": "object"
      },
      "Customer": {
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string",
            "maxLength": 150,
            "minLength": 2
          },
          "number": {
            "type": "string",
            "maxLength": 50
          },
          "comment": {
            "type": "string"
          },
          "visible": {
            "type": "boolean",
            "default": true
          },
          "billable": {
            "type": "boolean",
            "default": true
          },
          "color": {
            "title": "The assigned color in HTML hex format, e.g. #dd1d00",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CustomerEntity": {
        "required": [
          "name",
          "country",
          "timezone"
        ],
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string",
            "maxLength": 150,
            "minLength": 2
          },
          "number": {
            "type": "string",
            "maxLength": 50
          },
          "comment": {
            "type": "string"
          },
          "visible": {
            "type": "boolean",
            "default": true
          },
          "billable": {
            "type": "boolean",
            "default": true
          },
          "company": {
            "type": "string",
            "maxLength": 100
          },
          "vatId": {
            "type": "string",
            "maxLength": 50
          },
          "contact": {
            "type": "string",
            "maxLength": 100
          },
          "address": {
            "type": "string"
          },
          "country": {
            "type": "string",
            "maxLength": 2
          },
          "currency": {
            "type": "string",
            "default": "EUR",
            "maxLength": 3
          },
          "phone": {
            "type": "string",
            "maxLength": 30
          },
          "fax": {
            "type": "string",
            "maxLength": 30
          },
          "mobile": {
            "type": "string",
            "maxLength": 30
          },
          "email": {
            "title": "Customers contact email",
            "type": "string",
            "maxLength": 75
          },
          "homepage": {
            "type": "string",
            "maxLength": 100
          },
          "timezone": {
            "title": "Timezone of begin and end",
            "type": "string",
            "maxLength": 64
          },
          "metaFields": {
            "title": "Meta fields registered with the customer",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerMeta"
            }
          },
          "teams": {
            "title": "Teams with access to the customer",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Team"
            }
          },
          "budget": {
            "title": "The total monetary budget, will be zero if not configured.",
            "type": "number",
            "format": "float",
            "default": 0
          },
          "timeBudget": {
            "title": "The time budget in seconds, will be zero if not configured.",
            "type": "integer",
            "default": 0,
            "maximum": 2145600000,
            "minimum": 0
          },
          "budgetType": {
            "title": "The type of budget:\n - null      = default / full time\n - month     = monthly budget",
            "type": "string"
          },
          "color": {
            "title": "The assigned color in HTML hex format, e.g. #dd1d00",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CustomerEditForm": {
        "required": [
          "name",
          "country",
          "currency",
          "timezone"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "number": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "company": {
            "type": "string"
          },
          "vatId": {
            "type": "string"
          },
          "contact": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "fax": {
            "type": "string"
          },
          "mobile": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "homepage": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          },
          "invoiceText": {
            "type": "string"
          },
          "invoiceTemplate": {
            "type": "string",
            "format": "App\\Entity\\InvoiceTemplate id"
          },
          "color": {
            "description": "The hexadecimal color code (default: auto-calculated by name)",
            "type": "string"
          },
          "visible": {
            "type": "boolean"
          },
          "billable": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Absence": {
        "required": [
          "user",
          "date"
        ],
        "properties": {
          "id": {
            "type": "integer"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "duration": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "type": {
            "type": "string",
            "default": "other"
          },
          "status": {
            "type": "string",
            "default": "new"
          },
          "halfDay": {
            "type": "boolean",
            "default": false
          }
        },
        "type": "object"
      },
      "AbsenceForm": {
        "required": [
          "comment",
          "user",
          "date",
          "type"
        ],
        "properties": {
          "halfDay": {
            "type": "boolean"
          },
          "duration": {
            "description": "Duration - supports various formats: https://www.kimai.org/documentation/duration-format.html",
            "type": "string",
            "example": "01:30"
          },
          "comment": {
            "description": "Comment for the absence. Will be visible in the in the absence list.",
            "type": "string"
          },
          "user": {
            "description": "User ID",
            "type": "integer",
            "example": 1
          },
          "date": {
            "description": "Start date of this absence.",
            "type": "string",
            "format": "date",
            "example": "2025-05-24"
          },
          "end": {
            "description": "End date of this absence. This field is not supported by all absence types.",
            "type": "string",
            "format": "date",
            "example": "2025-05-24"
          },
          "type": {
            "type": "string",
            "enum": [
              "holiday",
              "time_off",
              "sickness",
              "sickness_child",
              "other",
              "parental",
              "unpaid_vacation"
            ]
          }
        },
        "type": "object"
      },
      "Absence2": {
        "required": [
          "user",
          "date"
        ],
        "properties": {
          "id": {
            "type": "integer"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "duration": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "type": {
            "type": "string",
            "default": "other"
          },
          "status": {
            "type": "string",
            "default": "new"
          },
          "halfDay": {
            "type": "boolean",
            "default": false
          }
        },
        "type": "object"
      },
      "CalendarEvent": {
        "properties": {
          "title": {
            "title": "Calendar entry title",
            "type": "string"
          },
          "color": {
            "title": "Calendar background color",
            "type": "string"
          },
          "textColor": {
            "title": "Calendar text color",
            "type": "string"
          },
          "allDay": {
            "title": "If this entry is all-day long",
            "type": "boolean",
            "default": false
          },
          "start": {
            "title": "Calendar entry start date",
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "title": "Calendar entry end date",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "PublicHoliday": {
        "required": [
          "date",
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string",
            "maxLength": 150,
            "minLength": 3
          },
          "publicHolidayGroup": {
            "$ref": "#/components/schemas/PublicHolidayGroup"
          },
          "halfDay": {
            "type": "boolean",
            "default": false
          }
        },
        "type": "object"
      },
      "PageAction": {
        "properties": {
          "id": {
            "title": "ID of the action",
            "type": "string"
          },
          "title": {
            "title": "Translated title to show the user",
            "type": "string"
          },
          "url": {
            "title": "URL of the action",
            "type": "string"
          },
          "class": {
            "title": "HTML classes to be used",
            "type": "string"
          },
          "attr": {
            "title": "HTML (data) attributes to render the action",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "divider": {
            "title": "Whether to render a divider before this item",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "TimesheetConfig": {
        "properties": {
          "trackingMode": {
            "title": "The time-tracking mode, see also: https://www.kimai.org/documentation/timesheet.html#tracking-modes",
            "type": "string",
            "default": "default"
          },
          "defaultBeginTime": {
            "title": "Default begin datetime in PHP format",
            "type": "string",
            "default": "now"
          },
          "activeEntriesHardLimit": {
            "title": "How many running timesheets a user is allowed to have at the same time",
            "type": "integer",
            "default": 1
          },
          "isAllowFutureTimes": {
            "title": "Whether entries for future times are allowed",
            "type": "boolean",
            "default": true
          },
          "isAllowOverlapping": {
            "title": "Whether overlapping entries are allowed",
            "type": "boolean",
            "default": true
          }
        },
        "type": "object"
      },
      "Version": {
        "properties": {
          "version": {
            "title": "Kimai Version, eg. \"2.0.0\"",
            "type": "string"
          },
          "versionId": {
            "title": "Kimai Version as integer, eg. 20000",
            "description": "Follows the same logic as PHP_VERSION_ID, see https://www.php.net/manual/de/function.phpversion.php",
            "type": "integer"
          },
          "copyright": {
            "title": "A full copyright notice",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Plugin": {
        "properties": {
          "name": {
            "title": "The plugin name, eg. \"ExpensesBundle\"",
            "type": "string"
          },
          "version": {
            "title": "The plugin version, eg. \"1.14\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PublicHolidayGroup": {
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 3
          }
        },
        "type": "object"
      },
      "InvoiceMeta": {
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "title": "Name of the meta (custom) field",
            "type": "string",
            "maxLength": 50,
            "minLength": 2
          },
          "value": {
            "title": "Value of the meta (custom) field",
            "type": "string",
            "maxLength": 65535
          }
        },
        "type": "object"
      },
      "TimesheetMeta": {
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "title": "Name of the meta (custom) field",
            "type": "string",
            "maxLength": 50,
            "minLength": 2
          },
          "value": {
            "title": "Value of the meta (custom) field",
            "type": "string",
            "maxLength": 65535
          }
        },
        "type": "object"
      },
      "ActivityMeta": {
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "title": "Name of the meta (custom) field",
            "type": "string",
            "maxLength": 50,
            "minLength": 2
          },
          "value": {
            "title": "Value of the meta (custom) field",
            "type": "string",
            "maxLength": 65535
          }
        },
        "type": "object"
      },
      "ProjectMeta": {
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "title": "Name of the meta (custom) field",
            "type": "string",
            "maxLength": 50,
            "minLength": 2
          },
          "value": {
            "title": "Value of the meta (custom) field",
            "type": "string",
            "maxLength": 65535
          }
        },
        "type": "object"
      },
      "CustomerMeta": {
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "title": "Name of the meta (custom) field",
            "type": "string",
            "maxLength": 50,
            "minLength": 2
          },
          "value": {
            "title": "Value of the meta (custom) field",
            "type": "string",
            "maxLength": 65535
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "bearer": {
        "type": "http",
        "description": "API Token",
        "bearerFormat": "KIMAI",
        "scheme": "bearer"
      }
    }
  },
  "security": [
    {
      "bearer": []
    }
  ],
  "tags": [
    {
      "name": "Absence"
    },
    {
      "name": "Public holiday"
    },
    {
      "name": "Work Contract"
    },
    {
      "name": "Actions"
    },
    {
      "name": "Activity"
    },
    {
      "name": "Default"
    },
    {
      "name": "Customer"
    },
    {
      "name": "Export"
    },
    {
      "name": "Invoice"
    },
    {
      "name": "Project"
    },
    {
      "name": "Tag"
    },
    {
      "name": "Team"
    },
    {
      "name": "Timesheet"
    },
    {
      "name": "User"
    }
  ]
}